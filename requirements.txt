import streamlit as st
import random
import time
import pandas as pd
import altair as alt
from textwrap import dedent
import base64
import os

# THIS MUST BE FIRST!
st.set_page_config(page_title="Sorting Visualizer", layout="wide")

streamlit
altair
pandas 

color_map = {
    'red': '#e74c3c',        # Default
    'green': '#00ff99',      # Sorted
    'yellow': '#ffe066',     # Compared
    'purple': '#9b59b6',     # Merge
    'orange': '#ff9900',     # Swapping
    'blue': '#3498db',       # Swapping (new)
    'white': '#ecf0f1'
} 

def draw_data(data, color_array):
    df = pd.DataFrame({
        'index': list(range(len(data))),
        'value': data,
        'color': [color_map.get(c, '#e74c3c') for c in color_array]
    })
    chart = alt.Chart(df).mark_bar(
        cornerRadiusTopLeft=5,
        cornerRadiusTopRight=5,
        stroke='black',
        strokeWidth=0.5
    ).encode(
        x=alt.X('index:O', title='', axis=alt.Axis(labelFontSize=14, title=None, ticks=False, domain=False)),
        y=alt.Y('value:Q', title='', axis=alt.Axis(labelFontSize=14, title=None, ticks=False, domain=False)),
        color=alt.Color('color:N', scale=None, legend=None),
        tooltip=['index', 'value']
    ).properties(
        width=1600,
        height=500
    )
    text = alt.Chart(df).mark_text(
        align='center',
        baseline='bottom',
        dy=-5,
        color='white',
        fontSize=12
    ).encode(
        x='index:O',
        y='value:Q',
        text='value:Q'
    )
    layered = alt.layer(chart, text).properties(
        width=1600,
        height=500,
        background='#181818'
    )
    st.altair_chart(layered, use_container_width=True) 

def set_bg_from_local(image_file):
    if not os.path.exists(image_file):
        st.warning(f"Background image '{image_file}' not found. Using default background.")
        return
    with open(image_file, "rb") as image:
        encoded = base64.b64encode(image.read()).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url('data:image/jpg;base64,{encoded}');
            background-size: cover;
            background-position: center;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

set_bg_from_local("background.jpg")

# ... rest of your code ... 

def bubble_sort(data, ascending=True):
    n = len(data)
    stats = {'comparisons': 0, 'swaps': 0}
    for i in range(n - 1):
        for j in range(n - i - 1):
            stats['comparisons'] += 1
            if (data[j] > data[j + 1]) if ascending else (data[j] < data[j + 1]):
                data[j], data[j + 1] = data[j + 1], data[j]
                stats['swaps'] += 1
                # Highlight swapped bars in blue
                yield data[:], ['blue' if x == j or x == j + 1 else 'red' for x in range(len(data))], stats.copy()
            else:
                # Highlight compared bars in yellow
                yield data[:], ['yellow' if x == j or x == j + 1 else 'red' for x in range(len(data))], stats.copy()
    yield data[:], ['green' for _ in range(len(data))], stats.copy() 

for i, (data, color_array, stats) in enumerate(steps):
    draw_data(data, color_array)
    progress_bar.progress((i+1)/total_steps, text=f"Step {i+1}/{total_steps}")
    stats_placeholder.info(f"Comparisons: {stats['comparisons']} | Swaps: {stats['swaps']}")
    time.sleep(0.005)
